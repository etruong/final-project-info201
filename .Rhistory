filter(is.na(dep_delay) == FALSE) $>$
summarize(average = mean(dep_delay))
# What was the average departure delay in each month?
# Save this as a data frame `dep.delay.by.month`
# Hint: you'll have to perform a grouping operation before summarizing your data
dep.delay.by.month <- group_by(flights, month) %>%
filter(is.na(dep_delay) == FALSE) %>%
summarize(average = mean(dep_delay))
View (dep.delay.by.month)
# Which month had the greatest average departure delay?
great.avg <- filter(dep.delay.by.month, max(average) == average)
View (great.avg)
print (great.avg$month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# 'plot()' function
plot(great.avg)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
des <- group_by(flights, dest) %>%
summarize(average = mean(arr_delay))
View(des)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
des <- group_by(flights, dest) %>%
filter(is.na(arr_delay) == FALSE) %>%
summarize(average = mean(arr_delay))
View (des)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
des <- group_by(flights, dest) %>%
filter(is.na(arr_delay) == FALSE) %>%
summarize(average = mean(arr_delay)) %>%
arrange(average)
View (des)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
des <- group_by(flights, dest) %>%
filter(is.na(arr_delay) == FALSE) %>%
summarize(average = mean(arr_delay)) %>%
arrange(-average)
View (des)
# You can look up these airports in the `airports` data frame!
airports
# You can look up these airports in the `airports` data frame!
airport
# You can look up these airports in the `airports` data frame!
airports
# You can look up these airports in the `airports` data frame!
View(airports)
# Which city was flown to with the highest average speed?
speed <- mutate(flights, speed = (hour * 60 + minute) / distance) %>%
group_by(dest) %>%
filter(max(speed) == speed)
View (speed)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
# Create a dataframe of the average arrival delay for each destination, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average delay?
avg.arr <- group_by(flights, dest) %>%
filter(is.na(arr_delay) == FALSE) %>%
left_join(airports)
# Create a dataframe of the average arrival delay for each destination, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average delay?
avg.arr <- group_by(flights, dest) %>%
filter(is.na(arr_delay) == FALSE) %>%
left_join(airports, by = c("faa" = "dest" ))
# Create a dataframe of the average arrival delay for each destination, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average delay?
avg.arr <- group_by(flights, dest) %>%
filter(is.na(arr_delay) == FALSE) %>%
left_join(airports, by = c("dest" = "faa" ))
View (avg.arr)
# Create a dataframe of the average arrival delay for each destination, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average delay?
avg.arr <- group_by(flights, dest) %>%
filter(is.na(arr_delay) == FALSE) %>%
summarize(average.delay = mean(arr_delay)) %>%
left_join(airports, by = c("dest" = "faa" ))
View (avg.arr)
# Create a dataframe of the average arrival delay for each destination, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average delay?
avg.arr <- group_by(flights, dest) %>%
filter(is.na(arr_delay) == FALSE) %>%
summarize(average.delay = mean(arr_delay)) %>%
left_join(airports, by = c("dest" = "faa" )) %>%
filter(average.delay == max(average.delay)) %>%
select(average.delay)
View (avg.arr)
# Create a dataframe of the average arrival delay for each destination, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average delay?
avg.arr <- group_by(flights, dest) %>%
filter(is.na(arr_delay) == FALSE) %>%
summarize(average.delay = mean(arr_delay)) %>%
left_join(airports, by = c("dest" = "faa" )) %>%
filter(average.delay == max(average.delay)) %>%
select(name)
View (avg.arr)
View (airlines)
data <- read.csv("data/intro-survey.csv", stringsAsFactors = FALSE)
is.data.frame (data)
### FIRST VISUALIZATION (Elisa)
View (data)
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os)
library("knitr")
library("dplyr")
library("ggplot2")
library("httr")
library("jsonlite")
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os)
View (web.data)
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os, cli_exp, web_exp)
View (web.data)
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os, cli_exp, web_exp, info_interest)
View (web.data)
ggplot(data = web.data) +
geom_line (mapping = aes(x = programming_exp, y = os))
ggplot(data = web.data) +
geom_line (mapping = aes(x = programming_exp, y = cli_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, y = cli_exp))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, y = cli_exp))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, y = info_interest))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, y = cli_exp))
ggplot(data = web.data) +
geom_histogram (mapping = aes(x = programming_exp, y = cli_exp))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, y = web_exp))
ggplot(data = web.data) +
geom_smooth (mapping = aes(x = programming_exp, y = web_exp))
ggplot(data = web.data) +
geom_line (mapping = aes(x = programming_exp, y = web_exp))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, y = web_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, color = info_interest))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, fill = info_interest))
ggplot(data = web.data) +
geom_line (mapping = aes(x = programming_exp, y = web_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp), stat = web_exp)
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, color = os))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = os))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest))
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os, cli_exp, web_exp, info_interest) %>%
filter (info_interest != "N/A")
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os, cli_exp, web_exp, info_interest) %>%
filter (info_interest != "N/A")
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest), stat = "web_exp")
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest), stat = web_exp)
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest), stat ="identity")
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, y = web_exp, fill = info_interest), stat ="identity")
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, y = os, fill = info_interest), stat = "identity")
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, y = cli_exp, fill = info_interest), stat = "identity")
# Install and load the `ggplot2` package
#install.packages('ggplot2')
library('ggplot2')
# For this exercise you will again be working with the `diamonds` data set.
# Use `?diamonds` to review details about this data set
?diamonds
# Draw a bar chart of the diamonds data, organized by cut
# Each bar's height is based on the "count" (number) of diamonds with that cut
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = depth, fill = clarity))
# Draw a bar chart of the diamonds data, organized by cut
# Each bar's height is based on the "count" (number) of diamonds with that cut
diamonds.sample <- sample_n(diamonds)
# Draw a bar chart of the diamonds data, organized by cut
# Each bar's height is based on the "count" (number) of diamonds with that cut
diamonds.sample <- sample_n(diamonds, 1000)
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = depth, fill = clarity))
# Install and load `ggplot2` and `dplyr`
library('ggplot2')
library('dplyr')
# Also install and load the `maps` package, which contains geometry for a number
# of pre-defined maps.
install.packages("maps")
library("maps")
# Use `map_data()` to load the `county` map of the US, storing it in a variable
# `counties.map`
map_data("county")
# Use `map_data()` to load the `county` map of the US, storing it in a variable
# `counties.map`
county <- map_data("county")
# Inspect this data frame to understand what data yu're working with
View (county)
# Use `map_data()` to load the `county` map of the US, storing it in a variable
# `counties.map`
counties.map <- map_data("county")
# Inspect this data frame to understand what data yu're working with
View (counties.map)
shiny::runApp('Documents/OneDrive - UW Office 365/INFO-201/Assignments/a7-data-app-etruong')
shiny::runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
shiny::runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = (start / 100), start.n = (end / 100))
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
setwd("~/Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201")
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = (start / 100), start.n = (end / 100))
View (combine.data)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), start.n = round (end / 100))
View (combine.data)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100))
View (combine.data)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
runApp()
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
ratings <- unique (combine.data$rating)
ratings <- order (ratings)
ratings <- arrange (ratings)
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
ratings <- unique (combine.data$rating)
ratings <- sort (ratings)
runApp()
runApp()
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
ratings <- unique (combine.data$rating) %>%
sort ()
p <- plot_ly(combine.data, x = ~rating, y = ~is.overnight, type = 'bar', name = 'SF Zoo')
p
p <- plot_ly(combine.data, x = ~ratings, y = ~count (is.overnight), type = 'bar', name = 'SF Zoo') %>%
add_trace(y = ~LA_Zoo, name = 'LA Zoo') %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
my.server <- function (input, output, session) {
# Search Section
output$output.all <- renderDT ({
data <- read.csv ("data/zip-code-data.csv", stringsAsFactors = FALSE)
data <- select (data, name, rating, price, location.address1, location.zip_code, url)
data <- unique (data)
return (data)
})
# Food Prices Section
# Questions: (1) when select and unselect by itself?
#            (2) how to validate if no data is returned
#            (3) if update options longer than other select all
price.data <- reactive({
data <- read.csv ("data/zip-code-data.csv", stringsAsFactors = FALSE)
data <- select (data, id, name, rating, price, location.zip_code) %>%
filter (is.na (price) != TRUE)
data <- unique (data)
if (input$location != "All Locations") {
data <- filter (data, location.zip_code == input$location)
}
return (data)
})
observe ({
data <- price.data () %>%
filter (price == input$price)
ratings <- unique (data$rating) %>%
sort ()
select.ratings <- input$rating
updateCheckboxGroupInput (session, "rating", choices = ratings, selected = input$rating)
})
output$price.plot <- renderPlot ({
data <- price.data () %>%
filter (price %in% input$price) %>%
filter (rating %in% input$rating)
price.graph <- ggplot (data) +
geom_bar (mapping = aes (x = price, fill = factor(rating)), position = "dodge") +
scale_fill_brewer (type = "qual", palette = 8, name = "Rating")
return (price.graph)
})
output$priced.restaraunts <- renderDT ({
data <- price.data () %>%
filter (price %in% input$price) %>%
filter (rating %in% input$rating) %>%
select (name, rating, price)
return (data)
})
# Hours Section
output$open.hour.graph <- renderPlotly ({
plot <- plot_ly(alpha = 0.6)
for (i in 1:length(ratings)) {
test <- filter (combine.data, rating == ratings[i])
plot <- plot %>% add_histogram (x = test$start.n, name = ratings[i])
}
x <- list(
title = "Opening Times (hr)",
showticklabels = TRUE,
ticks = "outside"
)
y <- list(
title = "Count",
showticklabels = TRUE,
ticks = "outside"
)
plot <- plot %>%
layout(barmode = "overlay", xaxis =  x, yaxis = y)
return (plot)
})
output$close.hour.graph <- renderPlotly ({
plot <- plot_ly(alpha = 0.6)
for (i in 1:length(ratings)) {
test <- filter (combine.data, rating == ratings[i])
plot <- plot %>% add_histogram (x = test$end.n, name = ratings[i])
}
x <- list(
title = "Closing Times (hr)",
showticklabels = TRUE,
ticks = "outside"
)
y <- list(
title = "Count",
showticklabels = TRUE,
ticks = "outside"
)
plot <- plot %>%
layout(barmode = "overlay", xaxis = x, yaxis = y)
return (plot)
})
}
p
p <- plot_ly(combine.data, x = ~ratings, y = ~is.overnight, type = 'bar', name = 'SF Zoo') %>%
add_trace(y = ~LA_Zoo, name = 'LA Zoo') %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
p
p <- plot_ly(combine.data, x = ~rating, y = ~is.overnight, type = 'bar', name = 'SF Zoo') %>%
add_trace(y = ~LA_Zoo, name = 'LA Zoo') %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
p
p <- plot_ly(combine.data, x = ~rating, y = ~is.overnight, type = 'bar', name = 'SF Zoo') %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
p
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
ratings <- unique (combine.data$rating) %>%
sort ()
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
source ("project.R")
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = ratings, fill = is.overnight))
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = is.overnight, fill = factor (rating)))
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
ratings <- unique (combine.data$rating) %>%
sort ()
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
View (combine.data)
is.data.frame(combine.data)
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
source ("project.R")
library ("DT")
library ("plotly")
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
ratings <- unique (combine.data$rating) %>%
sort ()
is.data.frame(combine.data)
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
is.data.frame(combine.data)
ggplot2 (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
ggplot (combine.data)
ggplot (combine.data) %>%
geom_point (mapping = aes (x = rating, y = end.n))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tags$img
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- read.csv ("data/zip-code-data.csv", stringsAsFactors = FALSE)
data <- data %>%
filter (is.na (price) != TRUE)
zip.codes <- data$location.zip_code
zip.codes <- unique (data$location.zip_code) %>%
sort ()
View (zip.codes)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
