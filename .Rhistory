# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average delay?
avg.arr <- group_by(flights, dest) %>%
filter(is.na(arr_delay) == FALSE) %>%
summarize(average.delay = mean(arr_delay)) %>%
left_join(airports, by = c("dest" = "faa" )) %>%
filter(average.delay == max(average.delay)) %>%
select(name)
View (avg.arr)
View (airlines)
data <- read.csv("data/intro-survey.csv", stringsAsFactors = FALSE)
is.data.frame (data)
### FIRST VISUALIZATION (Elisa)
View (data)
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os)
library("knitr")
library("dplyr")
library("ggplot2")
library("httr")
library("jsonlite")
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os)
View (web.data)
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os, cli_exp, web_exp)
View (web.data)
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os, cli_exp, web_exp, info_interest)
View (web.data)
ggplot(data = web.data) +
geom_line (mapping = aes(x = programming_exp, y = os))
ggplot(data = web.data) +
geom_line (mapping = aes(x = programming_exp, y = cli_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, y = cli_exp))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, y = cli_exp))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, y = info_interest))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, y = cli_exp))
ggplot(data = web.data) +
geom_histogram (mapping = aes(x = programming_exp, y = cli_exp))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, y = web_exp))
ggplot(data = web.data) +
geom_smooth (mapping = aes(x = programming_exp, y = web_exp))
ggplot(data = web.data) +
geom_line (mapping = aes(x = programming_exp, y = web_exp))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, y = web_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, color = info_interest))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, fill = info_interest))
ggplot(data = web.data) +
geom_line (mapping = aes(x = programming_exp, y = web_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp), stat = web_exp)
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, color = os))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = os))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest))
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os, cli_exp, web_exp, info_interest) %>%
filter (info_interest != "N/A")
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os, cli_exp, web_exp, info_interest) %>%
filter (info_interest != "N/A")
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest), stat = "web_exp")
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest), stat = web_exp)
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest), stat ="identity")
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, y = web_exp, fill = info_interest), stat ="identity")
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, y = os, fill = info_interest), stat = "identity")
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, y = cli_exp, fill = info_interest), stat = "identity")
# Install and load the `ggplot2` package
#install.packages('ggplot2')
library('ggplot2')
# For this exercise you will again be working with the `diamonds` data set.
# Use `?diamonds` to review details about this data set
?diamonds
# Draw a bar chart of the diamonds data, organized by cut
# Each bar's height is based on the "count" (number) of diamonds with that cut
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = depth, fill = clarity))
# Draw a bar chart of the diamonds data, organized by cut
# Each bar's height is based on the "count" (number) of diamonds with that cut
diamonds.sample <- sample_n(diamonds)
# Draw a bar chart of the diamonds data, organized by cut
# Each bar's height is based on the "count" (number) of diamonds with that cut
diamonds.sample <- sample_n(diamonds, 1000)
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = depth, fill = clarity))
# Install and load `ggplot2` and `dplyr`
library('ggplot2')
library('dplyr')
# Also install and load the `maps` package, which contains geometry for a number
# of pre-defined maps.
install.packages("maps")
library("maps")
# Use `map_data()` to load the `county` map of the US, storing it in a variable
# `counties.map`
map_data("county")
# Use `map_data()` to load the `county` map of the US, storing it in a variable
# `counties.map`
county <- map_data("county")
# Inspect this data frame to understand what data yu're working with
View (county)
# Use `map_data()` to load the `county` map of the US, storing it in a variable
# `counties.map`
counties.map <- map_data("county")
# Inspect this data frame to understand what data yu're working with
View (counties.map)
shiny::runApp('Documents/OneDrive - UW Office 365/INFO-201/Assignments/a7-data-app-etruong')
shiny::runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
shiny::runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = (start / 100), start.n = (end / 100))
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
setwd("~/Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201")
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = (start / 100), start.n = (end / 100))
View (combine.data)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), start.n = round (end / 100))
View (combine.data)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100))
View (combine.data)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
runApp()
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
ratings <- unique (combine.data$rating)
ratings <- order (ratings)
ratings <- arrange (ratings)
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
ratings <- unique (combine.data$rating)
ratings <- sort (ratings)
runApp()
runApp()
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
ratings <- unique (combine.data$rating) %>%
sort ()
p <- plot_ly(combine.data, x = ~rating, y = ~is.overnight, type = 'bar', name = 'SF Zoo')
p
p <- plot_ly(combine.data, x = ~ratings, y = ~count (is.overnight), type = 'bar', name = 'SF Zoo') %>%
add_trace(y = ~LA_Zoo, name = 'LA Zoo') %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
my.server <- function (input, output, session) {
# Search Section
output$output.all <- renderDT ({
data <- read.csv ("data/zip-code-data.csv", stringsAsFactors = FALSE)
data <- select (data, name, rating, price, location.address1, location.zip_code, url)
data <- unique (data)
return (data)
})
# Food Prices Section
# Questions: (1) when select and unselect by itself?
#            (2) how to validate if no data is returned
#            (3) if update options longer than other select all
price.data <- reactive({
data <- read.csv ("data/zip-code-data.csv", stringsAsFactors = FALSE)
data <- select (data, id, name, rating, price, location.zip_code) %>%
filter (is.na (price) != TRUE)
data <- unique (data)
if (input$location != "All Locations") {
data <- filter (data, location.zip_code == input$location)
}
return (data)
})
observe ({
data <- price.data () %>%
filter (price == input$price)
ratings <- unique (data$rating) %>%
sort ()
select.ratings <- input$rating
updateCheckboxGroupInput (session, "rating", choices = ratings, selected = input$rating)
})
output$price.plot <- renderPlot ({
data <- price.data () %>%
filter (price %in% input$price) %>%
filter (rating %in% input$rating)
price.graph <- ggplot (data) +
geom_bar (mapping = aes (x = price, fill = factor(rating)), position = "dodge") +
scale_fill_brewer (type = "qual", palette = 8, name = "Rating")
return (price.graph)
})
output$priced.restaraunts <- renderDT ({
data <- price.data () %>%
filter (price %in% input$price) %>%
filter (rating %in% input$rating) %>%
select (name, rating, price)
return (data)
})
# Hours Section
output$open.hour.graph <- renderPlotly ({
plot <- plot_ly(alpha = 0.6)
for (i in 1:length(ratings)) {
test <- filter (combine.data, rating == ratings[i])
plot <- plot %>% add_histogram (x = test$start.n, name = ratings[i])
}
x <- list(
title = "Opening Times (hr)",
showticklabels = TRUE,
ticks = "outside"
)
y <- list(
title = "Count",
showticklabels = TRUE,
ticks = "outside"
)
plot <- plot %>%
layout(barmode = "overlay", xaxis =  x, yaxis = y)
return (plot)
})
output$close.hour.graph <- renderPlotly ({
plot <- plot_ly(alpha = 0.6)
for (i in 1:length(ratings)) {
test <- filter (combine.data, rating == ratings[i])
plot <- plot %>% add_histogram (x = test$end.n, name = ratings[i])
}
x <- list(
title = "Closing Times (hr)",
showticklabels = TRUE,
ticks = "outside"
)
y <- list(
title = "Count",
showticklabels = TRUE,
ticks = "outside"
)
plot <- plot %>%
layout(barmode = "overlay", xaxis = x, yaxis = y)
return (plot)
})
}
p
p <- plot_ly(combine.data, x = ~ratings, y = ~is.overnight, type = 'bar', name = 'SF Zoo') %>%
add_trace(y = ~LA_Zoo, name = 'LA Zoo') %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
p
p <- plot_ly(combine.data, x = ~rating, y = ~is.overnight, type = 'bar', name = 'SF Zoo') %>%
add_trace(y = ~LA_Zoo, name = 'LA Zoo') %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
p
p <- plot_ly(combine.data, x = ~rating, y = ~is.overnight, type = 'bar', name = 'SF Zoo') %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
p
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
ratings <- unique (combine.data$rating) %>%
sort ()
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
source ("project.R")
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = ratings, fill = is.overnight))
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = is.overnight, fill = factor (rating)))
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
ratings <- unique (combine.data$rating) %>%
sort ()
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
View (combine.data)
is.data.frame(combine.data)
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
source ("project.R")
library ("DT")
library ("plotly")
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
ratings <- unique (combine.data$rating) %>%
sort ()
is.data.frame(combine.data)
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
is.data.frame(combine.data)
ggplot2 (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
ggplot (combine.data)
ggplot (combine.data) %>%
geom_point (mapping = aes (x = rating, y = end.n))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tags$img
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- read.csv ("data/zip-code-data.csv", stringsAsFactors = FALSE)
data <- data %>%
filter (is.na (price) != TRUE)
zip.codes <- data$location.zip_code
zip.codes <- unique (data$location.zip_code) %>%
sort ()
View (zip.codes)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
########################
## SET UP FOR WIDGETS ##
########################
install.packages("shinyjs")
########################
## SET UP FOR WIDGETS ##
########################
# install.packages("shinyjs")
library("shinyjs")
runApp()
runApp()
runApp()
zip.code.data <- read.csv("data/zip-code-data.csv")
# Only gets the data that has review counts greater than 100 for more reliable data
zip.code.filtered <- filter(zip.code.data, review_count >= 100)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
yelp.data <- read.csv("data/zip-code-data.csv", stringsAsFactors = FALSE)
cuisines <- c("asianfusion", "cajun", "caribbean", "cantonese", "chinese", "french", "german", "greek", "hawaiian", "italian",
"japanese", "korean", "mediterranean", "mexican", "newamerican", "taiwanese", "thai",
"tradamerican", "vietnamese")
yelp.data <- distinct(yelp.data, id, name, review_count, rating, price,
phone, coordinates.latitude, coordinates.longitude,
location.address1, location.city, location.zip_code, location.country, location.state, category)
curr.data <- na.omit(yelp.data %>%
filter(review_count >= 100 & category %in% cuisines) %>%
select(name, category, rating, review_count))
summary <- curr.data %>%
group_by(category) %>%
summarise(max = round(max(rating), 2), min = round(min(rating), 2), mean = round(mean(rating), 2),
median = round(median(rating), 2), std.dev = round(sd(rating), 2), variance = round(var(rating), 2),
range = max(rating) - min(rating))
# View(summary)
min.mean <- min(summary$mean)
max.mean <- max(summary$mean)
min.mean.cat <- summary[summary$mean == min.mean, ][1, 1]
# min.mean.cat <- filter(summary, mean == min.mean) %>%
#   select(category)
max.mean.cat <- summary[summary$mean == max.mean, 1]
min.range <- min(summary$range)
max.range <- max(summary$range)
min.range.cat <- summary[summary$range == min.range, 1]
max.range.cat <- summary[summary$range == max.range, 1]
min.var <- min(summary$variance)
max.var <- max(summary$variance)
min.var.cat <- summary[summary$variance == min.var, 1]
max.var.cat <- summary[summary$variance == max.var, 1]
conclusion <- paste0("A total of 581 restaurants were included in this analysis. From these, 577 were included in
the final result. The 4 restaurants were removed were considered outliers because their rating
was greater than 3 standard deviations above or below the mean.
From the types of cuisines and data analyzed, we can conclude that although there is not a significant
correlation between the cuisine and the rating, there are some cuisines that tend to fare better than others.
From an average rating metric, the values range from, ", min.mean, " to ", max.mean, ". With respect to the
gathered data, ", max.mean.cat, " food is highly rated on average, while ", min.mean.cat, " food is
lowly rated on average.
With respect to range, ", max.range.cat, " restaurants had the highest range in their
ratings (", max.range, "), while ",  min.range.cat, " and ", min.range.cat, " cuisines had
less range (", min.range, "). With respect to variance, ", max.var.cat, " restaurants had the highest
variance (", max.var,"), while, ", min.var.cat," cuisines had the lowest variance (", min.var, ").")
View (conclusion)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
