<<<<<<< HEAD
# 98101 not included because it is used at the first parameter
zip.codes <- c("98102", "98103", "98104", "98105", "98106", "98107", "98108", "98109",
"98111", "98112", "98113", "98114", "98115", "98116", "98117", "98118", "98119",
"98121", "98122", "98124", "98125", "98126", "98127", "98129",
"98131", "98132", "98133", "98134", "98136", "98139",
"98141", "98144", "98145", "98146", "98154", "98161", "98164", "98165",
"98170", "98174", "98175", "98177", "98178", "98181", "98185",
"98190", "98191", "98194", "98195", "98199")
resource <- "businesses/search"
initial.query <- list(term = "restaurants", location = "Seattle, Washington, 98101")
zip.data <- GetContent(resource, initial.query)
for(zip in zip.codes) {
query.params <- list(term = "restaurants", location = paste("Seattle, Washington,", zip))
data <- GetContent(resource, query.params)
zip.data <- left_join(zip.data, data)
=======
### FIRST VISUALIZATION (Elisa)
View (data)
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os)
library("knitr")
library("dplyr")
library("ggplot2")
library("httr")
library("jsonlite")
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os)
View (web.data)
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os, cli_exp, web_exp)
View (web.data)
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os, cli_exp, web_exp, info_interest)
View (web.data)
ggplot(data = web.data) +
geom_line (mapping = aes(x = programming_exp, y = os))
ggplot(data = web.data) +
geom_line (mapping = aes(x = programming_exp, y = cli_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, y = cli_exp))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, y = cli_exp))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, y = info_interest))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, y = cli_exp))
ggplot(data = web.data) +
geom_histogram (mapping = aes(x = programming_exp, y = cli_exp))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, y = web_exp))
ggplot(data = web.data) +
geom_smooth (mapping = aes(x = programming_exp, y = web_exp))
ggplot(data = web.data) +
geom_line (mapping = aes(x = programming_exp, y = web_exp))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, y = web_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, color = info_interest))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, fill = info_interest))
ggplot(data = web.data) +
geom_line (mapping = aes(x = programming_exp, y = web_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp), stat = web_exp)
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, color = os))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = os))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest))
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os, cli_exp, web_exp, info_interest) %>%
filter (info_interest != "N/A")
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os, cli_exp, web_exp, info_interest) %>%
filter (info_interest != "N/A")
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest), stat = "web_exp")
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest), stat = web_exp)
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest), stat ="identity")
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, y = web_exp, fill = info_interest), stat ="identity")
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, y = os, fill = info_interest), stat = "identity")
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, y = cli_exp, fill = info_interest), stat = "identity")
# Install and load the `ggplot2` package
#install.packages('ggplot2')
library('ggplot2')
# For this exercise you will again be working with the `diamonds` data set.
# Use `?diamonds` to review details about this data set
?diamonds
# Draw a bar chart of the diamonds data, organized by cut
# Each bar's height is based on the "count" (number) of diamonds with that cut
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = depth, fill = clarity))
# Draw a bar chart of the diamonds data, organized by cut
# Each bar's height is based on the "count" (number) of diamonds with that cut
diamonds.sample <- sample_n(diamonds)
# Draw a bar chart of the diamonds data, organized by cut
# Each bar's height is based on the "count" (number) of diamonds with that cut
diamonds.sample <- sample_n(diamonds, 1000)
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = depth, fill = clarity))
# Install and load `ggplot2` and `dplyr`
library('ggplot2')
library('dplyr')
# Also install and load the `maps` package, which contains geometry for a number
# of pre-defined maps.
install.packages("maps")
library("maps")
# Use `map_data()` to load the `county` map of the US, storing it in a variable
# `counties.map`
map_data("county")
# Use `map_data()` to load the `county` map of the US, storing it in a variable
# `counties.map`
county <- map_data("county")
# Inspect this data frame to understand what data yu're working with
View (county)
# Use `map_data()` to load the `county` map of the US, storing it in a variable
# `counties.map`
counties.map <- map_data("county")
# Inspect this data frame to understand what data yu're working with
View (counties.map)
shiny::runApp('Documents/OneDrive - UW Office 365/INFO-201/Assignments/a7-data-app-etruong')
shiny::runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
shiny::runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = (start / 100), start.n = (end / 100))
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
setwd("~/Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201")
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = (start / 100), start.n = (end / 100))
View (combine.data)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), start.n = round (end / 100))
View (combine.data)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100))
View (combine.data)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
runApp()
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
ratings <- unique (combine.data$rating)
ratings <- order (ratings)
ratings <- arrange (ratings)
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
ratings <- unique (combine.data$rating)
ratings <- sort (ratings)
runApp()
runApp()
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
ratings <- unique (combine.data$rating) %>%
sort ()
p <- plot_ly(combine.data, x = ~rating, y = ~is.overnight, type = 'bar', name = 'SF Zoo')
p
p <- plot_ly(combine.data, x = ~ratings, y = ~count (is.overnight), type = 'bar', name = 'SF Zoo') %>%
add_trace(y = ~LA_Zoo, name = 'LA Zoo') %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
my.server <- function (input, output, session) {
# Search Section
output$output.all <- renderDT ({
data <- read.csv ("data/zip-code-data.csv", stringsAsFactors = FALSE)
data <- select (data, name, rating, price, location.address1, location.zip_code, url)
data <- unique (data)
return (data)
})
# Food Prices Section
# Questions: (1) when select and unselect by itself?
#            (2) how to validate if no data is returned
#            (3) if update options longer than other select all
price.data <- reactive({
data <- read.csv ("data/zip-code-data.csv", stringsAsFactors = FALSE)
data <- select (data, id, name, rating, price, location.zip_code) %>%
filter (is.na (price) != TRUE)
data <- unique (data)
if (input$location != "All Locations") {
data <- filter (data, location.zip_code == input$location)
}
return (data)
})
observe ({
data <- price.data () %>%
filter (price == input$price)
ratings <- unique (data$rating) %>%
sort ()
select.ratings <- input$rating
updateCheckboxGroupInput (session, "rating", choices = ratings, selected = input$rating)
})
output$price.plot <- renderPlot ({
data <- price.data () %>%
filter (price %in% input$price) %>%
filter (rating %in% input$rating)
price.graph <- ggplot (data) +
geom_bar (mapping = aes (x = price, fill = factor(rating)), position = "dodge") +
scale_fill_brewer (type = "qual", palette = 8, name = "Rating")
return (price.graph)
})
output$priced.restaraunts <- renderDT ({
data <- price.data () %>%
filter (price %in% input$price) %>%
filter (rating %in% input$rating) %>%
select (name, rating, price)
return (data)
})
# Hours Section
output$open.hour.graph <- renderPlotly ({
plot <- plot_ly(alpha = 0.6)
for (i in 1:length(ratings)) {
test <- filter (combine.data, rating == ratings[i])
plot <- plot %>% add_histogram (x = test$start.n, name = ratings[i])
>>>>>>> 65415b8250beb61c8be4df5c580d49eebf21b28a
}
View(zip.data)
zip.content <- GetContent(resource, initial.query)
zip.data <- zip.content$businesses
View(zip.data)
resource <- "businesses/search"
initial.query <- list(term = "restaurants", location = "Seattle, Washington, 98101")
zip.content <- GetContent(resource, initial.query, limit = 50)
zip.data <- zip.content$businesses
View(zip.data)
initial.query <- list(term = "restaurants", location = "Seattle, Washington, 98101", limit = 50)
resource <- "businesses/search"
initial.query <- list(term = "restaurants", location = "Seattle, Washington, 98101", limit = 50)
zip.content <- GetContent(resource, initial.query)
zip.data <- zip.content$businesses
View(zip.data)
resource <- "businesses/search"
initial.query <- list(term = "restaurants", location = "Seattle, Washington, 98101", limit = 50)
zip.content <- GetContent(resource, initial.query)
zip.data <- zip.content$businesses
View(zip.data)
for(zip in zip.codes) {
query.params <- list(term = "restaurants", location = paste("Seattle, Washington,", zip), limit = 50)
content <- GetContent(resource, query.params)
data <-- content$businesses
zip.data <- left_join(zip.data, data)
}
<<<<<<< HEAD
View(zip.data)
query <- list(term = "restaurants", location = paste("Seattle, Washington, 98103"), limit = 50)
content2 <- GetContent(resouce, query)
data2 <- content2$businesses
View(data2)
query <- list(term = "restaurants", location = paste("Seattle, Washington, 98103"), limit = 50)
content2 <- GetContent(resouce, query)
content2 <- GetContent(resource, query)
query <- list(term = "restaurants", location = paste("Seattle, Washington, 98103"), limit = 50)
content2 <- GetContent(resource, query)
data2 <- content2$businesses
View(data2)
query <- list(term = "restaurants", location = paste("Seattle, Washington, 98103"), limit = 50)
content2 <- GetContent(resource, query)
data2 <- content2$businesses
zip.data <- left_join(zip.data, data2)
View(zip.data)
resource <- "businesses/search"
zip.data <- rbind(zip.data, data2)
View(zip.data)
zip.data <- rbind(zip.data, data2)
rownames(data2) <- 51:100
zip.data <- rbind(zip.data, data2)
rownames(data2) <- 51:100
View(data2)
zip.data <- rbind(zip.data, data2)
View(zip.data)
zip.data <- inner_join(zip.data, data2)
View(zip.data)
resource <- "businesses/search"
initial.query <- list(term = "restaurants", location = "Seattle, Washington, 98101", limit = 50)
zip.content <- GetContent(resource, initial.query)
zip.data <- zip.content$businesses
query <- list(term = "restaurants", location = paste("Seattle, Washington, 98103"), limit = 50)
content2 <- GetContent(resource, query)
data2 <- content2$businesses
rownames(data2) <- 51:100
zip.data <- rbind(zip.data, data2)
View(data2)
resource <- "businesses/search"
initial.query <- list(term = "restaurants", location = "Seattle, Washington, 98101", limit = 50)
zip.content <- GetContent(resource, initial.query)
zip.data <- zip.content$businesses
query <- list(term = "restaurants", location = paste("Seattle, Washington, 98103"), limit = 50)
content2 <- GetContent(resource, query)
data2 <- content2$businesses
rownames(data2) <- 51:100
combined <- rbind(zip.data, data2)
View(combined)
rbind(zip.data, row51)
row51 <- data2[1, ]
rbind(zip.data, row51)
rownames(data2) <- 51:100
rbind(zip.data, row51)
zip.data <- zip.content$businesses
rownames(zip.data) <- 1:50
row51 <- data2[1, ]
rbind(zip.data, row51)
rownames(zip.data) <- 1:50
row51 <- data2[1, ]
View(row51)
rbind(zip.data, row51)
rownames(row51) <- "test"
View(row51)
rbind(zip.data, row51)
row1 <- zip.data[1, ]
rownames(zip.data) <- "bleh"
rownames(zip.data) <- "bleh"
row51 <- data2[1, ]
rownames(row51) <- "test"
View(row51)
rbind(row1, row51)
View(data2)
rownames(row51) <- "test"
test <- rbind(row1, row51)
View()
row1 <- zip.data[1, ]
rownames(zip.data) <- "bleh"
row51 <- data2[1, ]
rownames(row51) <- "test"
row1 <- zip.data[1, ]
rownames(row1) <- "bleh"
row51 <- data2[1, ]
rownames(row51) <- "test"
test <- rbind(row1, row51)
source('~/Winter-2018/Info-201/Homework/final-project-info201/test.R')
source('~/Winter-2018/Info-201/Homework/final-project-info201/project.R')
View(zip.data)
View(zip.data)
View(categories)
categories <- zip.data$categories
category <- c()
View(categories)
yelp.data <- read.csv("data/zip-code-data.csv")
yelp.data <- read.csv("data/zip-code-data.csv")
shiny::runApp()
=======
p
p <- plot_ly(combine.data, x = ~ratings, y = ~is.overnight, type = 'bar', name = 'SF Zoo') %>%
add_trace(y = ~LA_Zoo, name = 'LA Zoo') %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
p
p <- plot_ly(combine.data, x = ~rating, y = ~is.overnight, type = 'bar', name = 'SF Zoo') %>%
add_trace(y = ~LA_Zoo, name = 'LA Zoo') %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
p
p <- plot_ly(combine.data, x = ~rating, y = ~is.overnight, type = 'bar', name = 'SF Zoo') %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
p
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
ratings <- unique (combine.data$rating) %>%
sort ()
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
source ("project.R")
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = ratings, fill = is.overnight))
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = is.overnight, fill = factor (rating)))
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
ratings <- unique (combine.data$rating) %>%
sort ()
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
View (combine.data)
is.data.frame(combine.data)
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
source ("project.R")
library ("DT")
library ("plotly")
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
ratings <- unique (combine.data$rating) %>%
sort ()
is.data.frame(combine.data)
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
is.data.frame(combine.data)
ggplot2 (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
ggplot (combine.data)
ggplot (combine.data) %>%
geom_point (mapping = aes (x = rating, y = end.n))
>>>>>>> 65415b8250beb61c8be4df5c580d49eebf21b28a
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
runApp()
runApp()
runApp()
View(yelp.data)
runApp()
runApp()
runApp()
runApp()
runApp()
?geom_boxplot
?ggplot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(yelp.data)
runApp()
runApp()
yelp.data <- read.csv("data/zip-code-data.csv")
cuisines <- c("American", "Caribbean", "Chinese", "French", "German", "Greek", "Indian", "Italian",
"Japanese", "Mediterranean", "Mexican", "Thai", "Vietnamese")
yelp.data <- distinct(yelp.data, name)
View(yelp.data)
yelp.data <- read.csv("data/zip-code-data.csv")
View(yelp.data)
yelp.data <- distinct(yelp.data, id, name, image_url, is_closed, url, review_count, rating, price,
phone, display_phone, distance, coordinates.latitude, coordinates.longitude,
location.address1, location.city, location.zip_code, location.country, location.state)
View(yelp.data)
runApp()
yelp.data <- read.csv("data/zip-code-data.csv")
cuisines <- c("American", "Caribbean", "Chinese", "French", "German", "Greek", "Indian", "Italian",
"Japanese", "Mediterranean", "Mexican", "Thai", "Vietnamese")
yelp.data <- distinct(yelp.data, id, name, review_count, rating, price,
phone, coordinates.latitude, coordinates.longitude,
location.address1, location.city, location.zip_code, location.country, location.state)
View(yelp.data)
runApp()
runApp()
yelp.data <- distinct(yelp.data, id, name, review_count, rating, price,
phone, coordinates.latitude, coordinates.longitude,
location.address1, location.city, location.zip_code, location.country, location.state, category)
yelp.data <- read.csv("data/zip-code-data.csv")
cuisines <- c("American", "Caribbean", "Chinese", "French", "German", "Greek", "Indian", "Italian",
"Japanese", "Mediterranean", "Mexican", "Thai", "Vietnamese")
yelp.data <- distinct(yelp.data, id, name, review_count, rating, price,
phone, coordinates.latitude, coordinates.longitude,
location.address1, location.city, location.zip_code, location.country, location.state, category)
View(yelp.data)
runApp()
runApp()
runApp()
runApp()
source("project.R")
yelp.data <- read.csv("data/zip-code-data.csv")
cusines <- c("American", "caribbean", "Chinese", "French", "German", "Greek", "Indian", "Italian",
"Japanese", "Mediterranean", "Mexican", "Thai", "Vietnamese")
zip.codes <- c("98101", "98102", "98103", "98104", "98105", "98106", "98107", "98108", "98109",
"98111", "98112", "98113", "98114", "98115", "98116", "98117", "98118", "98119",
"98121", "98122", "98124", "98125", "98126", "98127", "98129",
"98131", "98132", "98133", "98134", "98136", "98139",
"98141", "98144", "98145", "98146", "98154", "98161", "98164", "98165",
"98170", "98174", "98175", "98177", "98178", "98181", "98185",
"98190", "98191", "98194", "98195", "98199")
yelp.data <- distinct(yelp.data, id, name, review_count, rating, price,
phone, coordinates.latitude, coordinates.longitude,
location.address1, location.city, location.zip_code, location.country, location.state, category)
runApp()
yelp.data <- read.csv("data/zip-code-data.csv")
cuisines <- c("american", "caribbean", "chinese", "french", "german", "greek", "indian", "italian",
"japanese", "mediterranean", "mexican", "thai", "vietnamese")
zip.codes <- c("98101", "98102", "98103", "98104", "98105", "98106", "98107", "98108", "98109",
"98111", "98112", "98113", "98114", "98115", "98116", "98117", "98118", "98119",
"98121", "98122", "98124", "98125", "98126", "98127", "98129",
"98131", "98132", "98133", "98134", "98136", "98139",
"98141", "98144", "98145", "98146", "98154", "98161", "98164", "98165",
"98170", "98174", "98175", "98177", "98178", "98181", "98185",
"98190", "98191", "98194", "98195", "98199")
yelp.data <- distinct(yelp.data, id, name, review_count, rating, price,
phone, coordinates.latitude, coordinates.longitude,
location.address1, location.city, location.zip_code, location.country, location.state, category)
selected <- c("chinese", "japanese")
data <- yelp.data %>%
filter(category %in% selected)
View(data)
runApp()
runApp()
install.packages(Hmisc)
install.packages('Hmisc')
runApp()
runApp()
runApp()
source('project.R')
library(dplyr)
cuisines <- c("cajun", "caribbean", "cantonese", "chinese", "french", "german", "greek", "italian",
"japanese", "mediterranean", "mexican","shanghainese", "thai", "vietnamese")
# 98101 not included because it is used as an initial parameter
zip.codes <- c("98102", "98103", "98104", "98105", "98106", "98107", "98108", "98109",
"98111", "98112", "98113", "98114", "98115", "98116", "98117", "98118", "98119",
"98121", "98122", "98124", "98125", "98126", "98127", "98129",
"98131", "98132", "98133", "98134", "98136", "98139",
"98141", "98144", "98145", "98146", "98154", "98161", "98164", "98165",
"98170", "98174", "98175", "98177", "98178", "98181", "98185",
"98190", "98191", "98194", "98195", "98199")
zip.columns <- c("id", "name", "image_url", "is_closed", "url", "review_count", "rating", "price", "phone", "display_phone",
"distance", "coordinates.latitude", "coordinates.longitude", "location.address1", "location.city",
"location.zip_code", "location.country", "location.state")
resource <- "businesses/search"
initial.query.zip <- list(term = "restaurants", location = "Seattle, Washington, 98101", limit = 50)
zip.content <- GetContent(resource, initial.query.zip)
zip.data <- flatten(zip.content$businesses)
for (zip in zip.codes) {
query.params <- list(term = "restaurants", location = paste("Seattle, Washington,", zip), limit = 50)
content <- GetContent(resource, query.params)
data <- flatten(content$businesses)
zip.data <- rbind(zip.data, data)
}
to.csv.zip <- select(zip.data, id, name, image_url, is_closed, url, review_count, rating, price,
phone, display_phone, distance, coordinates.latitude, coordinates.longitude,
location.address1, location.city, location.zip_code, location.country, location.state)
categories <- zip.data$categories
for (num in 1:length(categories)) {
categories[num] <- categories[[num]][1]
}
View(categories)
cuisines <- c("asianfusion", "cajun", "caribbean", "cantonese", "chinese", "french", "german", "greek", "hawaiian", "italian",
"japanese", "korean", "mediterranean", "mexican", "newamerican", "shanghainese", "taiwanese", "thai",
"tradamerican", "vietnamese")
# 98101 not included because it is used as an initial parameter
zip.codes <- c("98102", "98103", "98104", "98105", "98106", "98107", "98108", "98109",
"98111", "98112", "98113", "98114", "98115", "98116", "98117", "98118", "98119",
"98121", "98122", "98124", "98125", "98126", "98127", "98129",
"98131", "98132", "98133", "98134", "98136", "98139",
"98141", "98144", "98145", "98146", "98154", "98161", "98164", "98165",
"98170", "98174", "98175", "98177", "98178", "98181", "98185",
"98190", "98191", "98194", "98195", "98199")
categories <- zip.data$categories
for (num in 1:length(categories)) {
categories[num] <- categories[[num]][1]
}
category <- c()
for (index in 1:length(categories)) {
for (element in categories[[index]]) {
if (element %in% cuisines) {
category[[index]] <- element
break
}
}
}
to.csv.zip$category <- category
write.csv(to.csv.zip, "data/zip-code-data.csv", row.names = FALSE)
runApp()
=======
runApp()
?tags$img
>>>>>>> 65415b8250beb61c8be4df5c580d49eebf21b28a
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
?ggplot
?theme
=======
runApp()
>>>>>>> 65415b8250beb61c8be4df5c580d49eebf21b28a
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
install.packages("shinyjs")
library("shinyjs")
=======
>>>>>>> 65415b8250beb61c8be4df5c580d49eebf21b28a
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
=======
data <- read.csv ("data/zip-code-data.csv", stringsAsFactors = FALSE)
data <- data %>%
filter (is.na (price) != TRUE)
zip.codes <- data$location.zip_code
zip.codes <- unique (data$location.zip_code) %>%
sort ()
View (zip.codes)
>>>>>>> 65415b8250beb61c8be4df5c580d49eebf21b28a
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
runApp()
runApp()
runApp()
runApp()
=======
shiny::runApp()
>>>>>>> 65415b8250beb61c8be4df5c580d49eebf21b28a
runApp()
########################
## SET UP FOR WIDGETS ##
########################
install.packages("shinyjs")
########################
## SET UP FOR WIDGETS ##
########################
# install.packages("shinyjs")
library("shinyjs")
runApp()
runApp()
runApp()
zip.code.data <- read.csv("data/zip-code-data.csv")
# Only gets the data that has review counts greater than 100 for more reliable data
zip.code.filtered <- filter(zip.code.data, review_count >= 100)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
yelp.data <- read.csv("data/zip-code-data.csv", stringsAsFactors = FALSE)
cuisines <- c("asianfusion", "cajun", "caribbean", "cantonese", "chinese", "french", "german", "greek", "hawaiian", "italian",
"japanese", "korean", "mediterranean", "mexican", "newamerican", "taiwanese", "thai",
"tradamerican", "vietnamese")
yelp.data <- distinct(yelp.data, id, name, review_count, rating, price,
phone, coordinates.latitude, coordinates.longitude,
location.address1, location.city, location.zip_code, location.country, location.state, category)
curr.data <- na.omit(yelp.data %>%
filter(review_count >= 100 & category %in% cuisines) %>%
select(name, category, rating, review_count))
summary <- curr.data %>%
group_by(category) %>%
summarise(max = round(max(rating), 2), min = round(min(rating), 2), mean = round(mean(rating), 2),
median = round(median(rating), 2), std.dev = round(sd(rating), 2), variance = round(var(rating), 2),
range = max(rating) - min(rating))
# View(summary)
min.mean <- min(summary$mean)
max.mean <- max(summary$mean)
min.mean.cat <- summary[summary$mean == min.mean, ][1, 1]
# min.mean.cat <- filter(summary, mean == min.mean) %>%
#   select(category)
max.mean.cat <- summary[summary$mean == max.mean, 1]
min.range <- min(summary$range)
max.range <- max(summary$range)
min.range.cat <- summary[summary$range == min.range, 1]
max.range.cat <- summary[summary$range == max.range, 1]
min.var <- min(summary$variance)
max.var <- max(summary$variance)
min.var.cat <- summary[summary$variance == min.var, 1]
max.var.cat <- summary[summary$variance == max.var, 1]
conclusion <- paste0("A total of 581 restaurants were included in this analysis. From these, 577 were included in
the final result. The 4 restaurants were removed were considered outliers because their rating
was greater than 3 standard deviations above or below the mean.
From the types of cuisines and data analyzed, we can conclude that although there is not a significant
correlation between the cuisine and the rating, there are some cuisines that tend to fare better than others.
From an average rating metric, the values range from, ", min.mean, " to ", max.mean, ". With respect to the
gathered data, ", max.mean.cat, " food is highly rated on average, while ", min.mean.cat, " food is
lowly rated on average.
With respect to range, ", max.range.cat, " restaurants had the highest range in their
ratings (", max.range, "), while ",  min.range.cat, " and ", min.range.cat, " cuisines had
less range (", min.range, "). With respect to variance, ", max.var.cat, " restaurants had the highest
variance (", max.var,"), while, ", min.var.cat," cuisines had the lowest variance (", min.var, ").")
View (conclusion)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
<<<<<<< HEAD
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("DT")
install.packages("plotly")
runApp()
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
ratings <- unique (combine.data$rating) %>%
sort ()
runApp()
yelp.data <- read.csv("data/zip-code-data.csv")
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
yelp.data <- distinct(yelp.data, id, name, review_count, rating, price,
phone, coordinates.latitude, coordinates.longitude,
location.address1, location.city, location.zip_code, location.country, location.state, category)
yelp.data <- read.csv("data/zip-code-data.csv", stringsAsFactors = FALSE)
yelp.data <- read.csv("data/zip-code-data.csv", stringsAsFactors = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?simpleCap
??simpleCap
install.packages("lettercase")
library("lettercase")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("DT")
runApp()
install.packages("plotly")
install.packages("plotly")
shiny::runApp()
runApp()
install.packages("rlang")
runApp()
install.packages("lettercase")
runApp()
install.packages("shinyjs")
runApp()
=======
>>>>>>> 65415b8250beb61c8be4df5c580d49eebf21b28a
