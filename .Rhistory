combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
ratings <- unique (combine.data$rating) %>%
sort ()
is.data.frame(combine.data)
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
is.data.frame(combine.data)
ggplot2 (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
ggplot (combine.data) %>%
geom_bar (mapping = aes (x = rating, fill = is.overnight))
ggplot (combine.data)
ggplot (combine.data) %>%
geom_point (mapping = aes (x = rating, y = end.n))
>>>>>>> 65415b8250beb61c8be4df5c580d49eebf21b28a
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
runApp()
runApp()
runApp()
View(yelp.data)
runApp()
runApp()
runApp()
runApp()
runApp()
?geom_boxplot
?ggplot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(yelp.data)
runApp()
runApp()
yelp.data <- read.csv("data/zip-code-data.csv")
cuisines <- c("American", "Caribbean", "Chinese", "French", "German", "Greek", "Indian", "Italian",
"Japanese", "Mediterranean", "Mexican", "Thai", "Vietnamese")
yelp.data <- distinct(yelp.data, name)
View(yelp.data)
yelp.data <- read.csv("data/zip-code-data.csv")
View(yelp.data)
yelp.data <- distinct(yelp.data, id, name, image_url, is_closed, url, review_count, rating, price,
phone, display_phone, distance, coordinates.latitude, coordinates.longitude,
location.address1, location.city, location.zip_code, location.country, location.state)
View(yelp.data)
runApp()
yelp.data <- read.csv("data/zip-code-data.csv")
cuisines <- c("American", "Caribbean", "Chinese", "French", "German", "Greek", "Indian", "Italian",
"Japanese", "Mediterranean", "Mexican", "Thai", "Vietnamese")
yelp.data <- distinct(yelp.data, id, name, review_count, rating, price,
phone, coordinates.latitude, coordinates.longitude,
location.address1, location.city, location.zip_code, location.country, location.state)
View(yelp.data)
runApp()
runApp()
yelp.data <- distinct(yelp.data, id, name, review_count, rating, price,
phone, coordinates.latitude, coordinates.longitude,
location.address1, location.city, location.zip_code, location.country, location.state, category)
yelp.data <- read.csv("data/zip-code-data.csv")
cuisines <- c("American", "Caribbean", "Chinese", "French", "German", "Greek", "Indian", "Italian",
"Japanese", "Mediterranean", "Mexican", "Thai", "Vietnamese")
yelp.data <- distinct(yelp.data, id, name, review_count, rating, price,
phone, coordinates.latitude, coordinates.longitude,
location.address1, location.city, location.zip_code, location.country, location.state, category)
View(yelp.data)
runApp()
runApp()
runApp()
runApp()
source("project.R")
yelp.data <- read.csv("data/zip-code-data.csv")
cusines <- c("American", "caribbean", "Chinese", "French", "German", "Greek", "Indian", "Italian",
"Japanese", "Mediterranean", "Mexican", "Thai", "Vietnamese")
zip.codes <- c("98101", "98102", "98103", "98104", "98105", "98106", "98107", "98108", "98109",
"98111", "98112", "98113", "98114", "98115", "98116", "98117", "98118", "98119",
"98121", "98122", "98124", "98125", "98126", "98127", "98129",
"98131", "98132", "98133", "98134", "98136", "98139",
"98141", "98144", "98145", "98146", "98154", "98161", "98164", "98165",
"98170", "98174", "98175", "98177", "98178", "98181", "98185",
"98190", "98191", "98194", "98195", "98199")
yelp.data <- distinct(yelp.data, id, name, review_count, rating, price,
phone, coordinates.latitude, coordinates.longitude,
location.address1, location.city, location.zip_code, location.country, location.state, category)
runApp()
yelp.data <- read.csv("data/zip-code-data.csv")
cuisines <- c("american", "caribbean", "chinese", "french", "german", "greek", "indian", "italian",
"japanese", "mediterranean", "mexican", "thai", "vietnamese")
zip.codes <- c("98101", "98102", "98103", "98104", "98105", "98106", "98107", "98108", "98109",
"98111", "98112", "98113", "98114", "98115", "98116", "98117", "98118", "98119",
"98121", "98122", "98124", "98125", "98126", "98127", "98129",
"98131", "98132", "98133", "98134", "98136", "98139",
"98141", "98144", "98145", "98146", "98154", "98161", "98164", "98165",
"98170", "98174", "98175", "98177", "98178", "98181", "98185",
"98190", "98191", "98194", "98195", "98199")
yelp.data <- distinct(yelp.data, id, name, review_count, rating, price,
phone, coordinates.latitude, coordinates.longitude,
location.address1, location.city, location.zip_code, location.country, location.state, category)
selected <- c("chinese", "japanese")
data <- yelp.data %>%
filter(category %in% selected)
View(data)
runApp()
runApp()
install.packages(Hmisc)
install.packages('Hmisc')
runApp()
runApp()
runApp()
source('project.R')
library(dplyr)
cuisines <- c("cajun", "caribbean", "cantonese", "chinese", "french", "german", "greek", "italian",
"japanese", "mediterranean", "mexican","shanghainese", "thai", "vietnamese")
# 98101 not included because it is used as an initial parameter
zip.codes <- c("98102", "98103", "98104", "98105", "98106", "98107", "98108", "98109",
"98111", "98112", "98113", "98114", "98115", "98116", "98117", "98118", "98119",
"98121", "98122", "98124", "98125", "98126", "98127", "98129",
"98131", "98132", "98133", "98134", "98136", "98139",
"98141", "98144", "98145", "98146", "98154", "98161", "98164", "98165",
"98170", "98174", "98175", "98177", "98178", "98181", "98185",
"98190", "98191", "98194", "98195", "98199")
zip.columns <- c("id", "name", "image_url", "is_closed", "url", "review_count", "rating", "price", "phone", "display_phone",
"distance", "coordinates.latitude", "coordinates.longitude", "location.address1", "location.city",
"location.zip_code", "location.country", "location.state")
resource <- "businesses/search"
initial.query.zip <- list(term = "restaurants", location = "Seattle, Washington, 98101", limit = 50)
zip.content <- GetContent(resource, initial.query.zip)
zip.data <- flatten(zip.content$businesses)
for (zip in zip.codes) {
query.params <- list(term = "restaurants", location = paste("Seattle, Washington,", zip), limit = 50)
content <- GetContent(resource, query.params)
data <- flatten(content$businesses)
zip.data <- rbind(zip.data, data)
}
to.csv.zip <- select(zip.data, id, name, image_url, is_closed, url, review_count, rating, price,
phone, display_phone, distance, coordinates.latitude, coordinates.longitude,
location.address1, location.city, location.zip_code, location.country, location.state)
categories <- zip.data$categories
for (num in 1:length(categories)) {
categories[num] <- categories[[num]][1]
}
View(categories)
cuisines <- c("asianfusion", "cajun", "caribbean", "cantonese", "chinese", "french", "german", "greek", "hawaiian", "italian",
"japanese", "korean", "mediterranean", "mexican", "newamerican", "shanghainese", "taiwanese", "thai",
"tradamerican", "vietnamese")
# 98101 not included because it is used as an initial parameter
zip.codes <- c("98102", "98103", "98104", "98105", "98106", "98107", "98108", "98109",
"98111", "98112", "98113", "98114", "98115", "98116", "98117", "98118", "98119",
"98121", "98122", "98124", "98125", "98126", "98127", "98129",
"98131", "98132", "98133", "98134", "98136", "98139",
"98141", "98144", "98145", "98146", "98154", "98161", "98164", "98165",
"98170", "98174", "98175", "98177", "98178", "98181", "98185",
"98190", "98191", "98194", "98195", "98199")
categories <- zip.data$categories
for (num in 1:length(categories)) {
categories[num] <- categories[[num]][1]
}
category <- c()
for (index in 1:length(categories)) {
for (element in categories[[index]]) {
if (element %in% cuisines) {
category[[index]] <- element
break
}
}
}
to.csv.zip$category <- category
write.csv(to.csv.zip, "data/zip-code-data.csv", row.names = FALSE)
runApp()
=======
runApp()
?tags$img
>>>>>>> 65415b8250beb61c8be4df5c580d49eebf21b28a
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
?ggplot
?theme
=======
runApp()
>>>>>>> 65415b8250beb61c8be4df5c580d49eebf21b28a
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
install.packages("shinyjs")
library("shinyjs")
=======
>>>>>>> 65415b8250beb61c8be4df5c580d49eebf21b28a
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
=======
data <- read.csv ("data/zip-code-data.csv", stringsAsFactors = FALSE)
data <- data %>%
filter (is.na (price) != TRUE)
zip.codes <- data$location.zip_code
zip.codes <- unique (data$location.zip_code) %>%
sort ()
View (zip.codes)
>>>>>>> 65415b8250beb61c8be4df5c580d49eebf21b28a
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
runApp()
runApp()
runApp()
runApp()
=======
shiny::runApp()
>>>>>>> 65415b8250beb61c8be4df5c580d49eebf21b28a
runApp()
########################
## SET UP FOR WIDGETS ##
########################
install.packages("shinyjs")
########################
## SET UP FOR WIDGETS ##
########################
# install.packages("shinyjs")
library("shinyjs")
runApp()
runApp()
runApp()
zip.code.data <- read.csv("data/zip-code-data.csv")
# Only gets the data that has review counts greater than 100 for more reliable data
zip.code.filtered <- filter(zip.code.data, review_count >= 100)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
yelp.data <- read.csv("data/zip-code-data.csv", stringsAsFactors = FALSE)
cuisines <- c("asianfusion", "cajun", "caribbean", "cantonese", "chinese", "french", "german", "greek", "hawaiian", "italian",
"japanese", "korean", "mediterranean", "mexican", "newamerican", "taiwanese", "thai",
"tradamerican", "vietnamese")
yelp.data <- distinct(yelp.data, id, name, review_count, rating, price,
phone, coordinates.latitude, coordinates.longitude,
location.address1, location.city, location.zip_code, location.country, location.state, category)
curr.data <- na.omit(yelp.data %>%
filter(review_count >= 100 & category %in% cuisines) %>%
select(name, category, rating, review_count))
summary <- curr.data %>%
group_by(category) %>%
summarise(max = round(max(rating), 2), min = round(min(rating), 2), mean = round(mean(rating), 2),
median = round(median(rating), 2), std.dev = round(sd(rating), 2), variance = round(var(rating), 2),
range = max(rating) - min(rating))
# View(summary)
min.mean <- min(summary$mean)
max.mean <- max(summary$mean)
min.mean.cat <- summary[summary$mean == min.mean, ][1, 1]
# min.mean.cat <- filter(summary, mean == min.mean) %>%
#   select(category)
max.mean.cat <- summary[summary$mean == max.mean, 1]
min.range <- min(summary$range)
max.range <- max(summary$range)
min.range.cat <- summary[summary$range == min.range, 1]
max.range.cat <- summary[summary$range == max.range, 1]
min.var <- min(summary$variance)
max.var <- max(summary$variance)
min.var.cat <- summary[summary$variance == min.var, 1]
max.var.cat <- summary[summary$variance == max.var, 1]
conclusion <- paste0("A total of 581 restaurants were included in this analysis. From these, 577 were included in
the final result. The 4 restaurants were removed were considered outliers because their rating
was greater than 3 standard deviations above or below the mean.
From the types of cuisines and data analyzed, we can conclude that although there is not a significant
correlation between the cuisine and the rating, there are some cuisines that tend to fare better than others.
From an average rating metric, the values range from, ", min.mean, " to ", max.mean, ". With respect to the
gathered data, ", max.mean.cat, " food is highly rated on average, while ", min.mean.cat, " food is
lowly rated on average.
With respect to range, ", max.range.cat, " restaurants had the highest range in their
ratings (", max.range, "), while ",  min.range.cat, " and ", min.range.cat, " cuisines had
less range (", min.range, "). With respect to variance, ", max.var.cat, " restaurants had the highest
variance (", max.var,"), while, ", min.var.cat," cuisines had the lowest variance (", min.var, ").")
View (conclusion)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
<<<<<<< HEAD
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("DT")
install.packages("plotly")
runApp()
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
ratings <- unique (combine.data$rating) %>%
sort ()
runApp()
yelp.data <- read.csv("data/zip-code-data.csv")
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv", stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end, is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
yelp.data <- distinct(yelp.data, id, name, review_count, rating, price,
phone, coordinates.latitude, coordinates.longitude,
location.address1, location.city, location.zip_code, location.country, location.state, category)
yelp.data <- read.csv("data/zip-code-data.csv", stringsAsFactors = FALSE)
yelp.data <- read.csv("data/zip-code-data.csv", stringsAsFactors = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?simpleCap
??simpleCap
install.packages("lettercase")
library("lettercase")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("DT")
runApp()
install.packages("plotly")
install.packages("plotly")
shiny::runApp()
runApp()
install.packages("rlang")
runApp()
install.packages("lettercase")
runApp()
install.packages("shinyjs")
runApp()
=======
>>>>>>> 65415b8250beb61c8be4df5c580d49eebf21b28a
shiny::runApp()
runApp()
runApp()
runApp()
# downloads all the packages required for application
source ("project.R")
# reads and sets up the dataset to be used to display
# opening and closing times graph/information
combine.data <- read.csv ("data/combine-hour-zip-code-data.csv",
stringsAsFactors = FALSE)
combine.data <- select (combine.data, id, name, rating, start, end,
is.overnight, location.zip_code) %>%
mutate (start.n = round (start / 100), end.n = round (end / 100)) %>%
select (id, name, rating, start.n, end.n, is.overnight, location.zip_code)
ratings <- unique (combine.data$rating) %>%
sort ()
zip.code.data <- read.csv("data/zip-code-data.csv")
# Only gets the data that has review counts greater than 100 for
# more reliable data
zip.code.filtered <- filter(zip.code.data, review_count >= 100)
# If there's time, we could also take a look at the correlation
# between the number of reviews and the rating
yelp.data <- read.csv("data/zip-code-data.csv", stringsAsFactors = FALSE)
cuisines <- str_cap_words(c("asianfusion", "cajun", "caribbean", "cantonese", "chinese", "french", "german", "greek", "hawaiian", "italian",
"japanese", "korean", "mediterranean", "mexican", "newamerican", "taiwanese", "thai",
"tradamerican", "vietnamese"))
yelp.data$category <- str_cap_words(yelp.data$category)
yelp.data <- distinct(yelp.data, id, name, review_count, rating, price,
phone, coordinates.latitude, coordinates.longitude,
location.address1, location.city, location.zip_code,
location.country, location.state, category)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
