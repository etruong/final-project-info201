sd(s)
mean(w)
length(w)
sd(w)
var(nw)
var(ne)
var(mw)
var(w)
var(s)
vgood <- c(0.47, 0.49, 0.33, 1.52, 0.64, 0.36, 0.41, 0.37, 0.48, 0.5, 0.51, 0.35)
good <- c(0.6, 0.64, 1.05, 2.73, 0.58, 0.75, 0.22, 0.33, 0.42, 0.46, 0.98, 1.16)
fair <- c(0.34, 0.46, 1.31, 0.44, 0.6)
mean(vgood)
mean(good)
mean(fair)
length(vgood)
sd(vgood)
var(vgood)
mean(vgood)
length(vgood)
sd(vgood)
var(vgood)
mean(good)
length(good)
sd(good)
var(good)
mean(fair)
length(fair)
sd(fair)
var(fair)
weight <- c(5940, 5340, 6500, 5100, 5850, 4800, 5600, 5890)
brake <- c(1.78, 1.93, 1.91, 1.59, 1.66, 1.50, 1.61, 1.7)
mean(weight)
length(weight)
sd(weight)
variance(weight)
var(weight)
mean(brake)
length(brake)
sd(brake)
var(brake)
x <- c(7.7, 6.7, 6.9, 6.8, 4.0, 3.8, 7.1, 5.9)
y <- c(35, 18, 17, 26, 5, 10, 25, 10)
mean(x)
length(x)
sd(x)
var(x)
mean(y)
length(y)
sd(y)
var(y)
x <- c(150, 170, 120,120,90,180,170,140,90,110)
y <- c(420,470,350,360,270,550,530,460,380,330)
x <- c(150, 170, 120,120,90,180,170,140,90,110)
y <- c(420,470,350,360,270,550,530,460,380,330)
mean(x)
length(x)
sd(x)
var(x)
mean(y)
length(y)
sd(y)
var(y)
2+0+1
3*4
2^10
2+0+1
3*4
2^10
2+0+1
3*4
2^10
# do math
2+0+1
print ("Hello")
print ("I am a human")
print ("That is false")
my.numm <- 201
# Exercise 1: practice with basic syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Redmond"
# Assign your name to the variable `my.name`
my.name <- "Elisa"
# Assign your height (in inches) to a variable `my.height`
height <- 61
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable `puppy.price`, which is how much you think a puppy costs
puppy.price <- 30.00
# Create a variable `total.cost` that has the total cost of all of your puppies
total.cost <- puppies * puppy.price
# Create a boolean variable `too.expensive`, set to TRUE if the cost is greater # than $1,000
too.expensive <- total.cost > 1000
# Create a variable `max.puppies`, which is the number of puppies you can afford # for $1,000
max.puppies <- 1000 / puppy.price
# Create a boolean variable `too.expensive`, set to TRUE if the cost is greater # than $1,000
too.expensive <- total.cost > 1000.00
# Create a variable `max.puppies`, which is the number of puppies you can afford # for $1,000
max.puppies <- 1000.00 / puppy.price
# Exercise 1: practice with basic syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Redmond"
# Assign your name to the variable `my.name`
my.name <- "Elisa"
# Assign your height (in inches) to a variable `my.height`
height <- 61
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable `puppy.price`, which is how much you think a puppy costs
puppy.price <- 30
# Create a variable `total.cost` that has the total cost of all of your puppies
total.cost <- puppies * puppy.price
# Create a boolean variable `too.expensive`, set to TRUE if the cost is greater # than $1,000
too.expensive <- total.cost > 1000
# Create a variable `max.puppies`, which is the number of puppies you can afford # for $1,000
max.puppies <- 1000 / puppy.price
toupper("Elisa")
install.packages("nycflights13")
load("nycflights13")
library("nycflights13")
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
# install.packages("nycflights13")
library("nycflights13")
# The data.frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
num.row <- nrow(flights)
num.col <- ncol(flights)
col.name <- colnames(flights)
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained in the air
data <- flights
View (data)
data <- mutate(data, time.gained.in.air)
library("dplyr")
data <- mutate(data, time.gained.in.air)
data <- mutate(data, time.gained.in.air = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
data <- arrange(data, time.gained.in.air)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables and reload the library
# to "reset" it.
data <- mutate(data, time.gained.in.air = ) %>%
arrange(time.gained.in.air)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables and reload the library
# to "reset" it.
data <- mutate(data, time.gained.in.air = arr_delay - dep_delay) %>%
arrange(time.gained.in.air)
??hist
??hist()
# Make a histogram of the amount of time gained using the `hist()` function
chart <- select(data, time.gained.in.air)
hist(chart)
hist(chart$time.gained.in.air)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
avg(chart$time.gained.in.air)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
average(chart$time.gained.in.air)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(chart$time.gained.in.air)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(chart$time.gained.in.air, na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain" column you just created
SEA <- select(data, origin, destination, time.gained.in.air)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain" column you just created
SEA <- select(data, origin, dest, time.gained.in.air)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain" column you just created
SEA <- filter(data, dest == "SEA") %>%
select(data, origin, dest, time.gained.in.air)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain" column you just created
SEA <- filter(data, dest == "SEA") %>%
select(origin, dest, time.gained.in.air)
View (SEA)
# On average, did flights to SeaTac gain or loose time?
mean(SEA$time.gained.in.air)
# On average, did flights to SeaTac gain or loose time?
mean(SEA$time.gained.in.air, na.rm = TRUE)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
jfk.sea <- filter(data, dest == "SEA", origin == "JFK") %>%
summarize(average = mean(time.gained.in.air), min = min(time.gained.in.air),
max = max(time.gained.in.air))
print (jfk.sea)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
jfk.sea <- filter(data, dest == "SEA", origin == "JFK", time.gained.in.air != NA) %>%
summarize(average = mean(time.gained.in.air), min = min(time.gained.in.air),
max = max(time.gained.in.air))
print (jfk.sea)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
jfk.sea <- filter(data, dest == "SEA", origin == "JFK", is.na(time.gained.in.air) == FALSE) %>%
summarize(average = mean(time.gained.in.air), min = min(time.gained.in.air),
max = max(time.gained.in.air))
print (jfk.sea)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables and reload the library
# to "reset" it.
data <- mutate(data, time.gained.in.air = arr_delay - dep_delay) %>%
arrange(-time.gained.in.air)
# Make a histogram of the amount of time gained using the `hist()` function
chart <- select(data, time.gained.in.air)
hist(chart$time.gained.in.air)
View (data)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
# What was the average departure delay in each month?
# Save this as a data frame `dep.delay.by.month`
# Hint: you'll have to perform a grouping operation before summarizing your data
dep.delay.by.month <- group_by(flights, month) %>%
summarize(average = mean(dep_delay))
# Which month had the greatest average departure delay?
great.avg <- filter(dep.delay.by.month, max(average) = average)
# Which month had the greatest average departure delay?
great.avg <- filter(dep.delay.by.month, max(average) == average)
print (great.avg)
View (great.avg)
# Which month had the greatest average departure delay?
great.avg <- filter(dep.delay.by.month, max(average) == average)
View (great.avg)
# What was the average departure delay in each month?
# Save this as a data frame `dep.delay.by.month`
# Hint: you'll have to perform a grouping operation before summarizing your data
dep.delay.by.month <- group_by(flights, month) %>%
summarize(average = mean(dep_delay))
View (dep.delay.by.month)
# What was the average departure delay in each month?
# Save this as a data frame `dep.delay.by.month`
# Hint: you'll have to perform a grouping operation before summarizing your data
dep.delay.by.month <- group_by(flights, month) %>%
summarize(average = mean(dep_delay), na.rm == TRUE)
# What was the average departure delay in each month?
# Save this as a data frame `dep.delay.by.month`
# Hint: you'll have to perform a grouping operation before summarizing your data
dep.delay.by.month <- group_by(flights, month) %>%
filter(is.na(dep_delay) == FALSE)
# What was the average departure delay in each month?
# Save this as a data frame `dep.delay.by.month`
# Hint: you'll have to perform a grouping operation before summarizing your data
dep.delay.by.month <- group_by(flights, month) %>%
filter(is.na(dep_delay) == FALSE) $>$
summarize(average = mean(dep_delay))
# What was the average departure delay in each month?
# Save this as a data frame `dep.delay.by.month`
# Hint: you'll have to perform a grouping operation before summarizing your data
dep.delay.by.month <- group_by(flights, month) %>%
filter(is.na(dep_delay) == FALSE) %>%
summarize(average = mean(dep_delay))
View (dep.delay.by.month)
# Which month had the greatest average departure delay?
great.avg <- filter(dep.delay.by.month, max(average) == average)
View (great.avg)
print (great.avg$month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# 'plot()' function
plot(great.avg)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
des <- group_by(flights, dest) %>%
summarize(average = mean(arr_delay))
View(des)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
des <- group_by(flights, dest) %>%
filter(is.na(arr_delay) == FALSE) %>%
summarize(average = mean(arr_delay))
View (des)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
des <- group_by(flights, dest) %>%
filter(is.na(arr_delay) == FALSE) %>%
summarize(average = mean(arr_delay)) %>%
arrange(average)
View (des)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
des <- group_by(flights, dest) %>%
filter(is.na(arr_delay) == FALSE) %>%
summarize(average = mean(arr_delay)) %>%
arrange(-average)
View (des)
# You can look up these airports in the `airports` data frame!
airports
# You can look up these airports in the `airports` data frame!
airport
# You can look up these airports in the `airports` data frame!
airports
# You can look up these airports in the `airports` data frame!
View(airports)
# Which city was flown to with the highest average speed?
speed <- mutate(flights, speed = (hour * 60 + minute) / distance) %>%
group_by(dest) %>%
filter(max(speed) == speed)
View (speed)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
# Create a dataframe of the average arrival delay for each destination, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average delay?
avg.arr <- group_by(flights, dest) %>%
filter(is.na(arr_delay) == FALSE) %>%
left_join(airports)
# Create a dataframe of the average arrival delay for each destination, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average delay?
avg.arr <- group_by(flights, dest) %>%
filter(is.na(arr_delay) == FALSE) %>%
left_join(airports, by = c("faa" = "dest" ))
# Create a dataframe of the average arrival delay for each destination, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average delay?
avg.arr <- group_by(flights, dest) %>%
filter(is.na(arr_delay) == FALSE) %>%
left_join(airports, by = c("dest" = "faa" ))
View (avg.arr)
# Create a dataframe of the average arrival delay for each destination, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average delay?
avg.arr <- group_by(flights, dest) %>%
filter(is.na(arr_delay) == FALSE) %>%
summarize(average.delay = mean(arr_delay)) %>%
left_join(airports, by = c("dest" = "faa" ))
View (avg.arr)
# Create a dataframe of the average arrival delay for each destination, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average delay?
avg.arr <- group_by(flights, dest) %>%
filter(is.na(arr_delay) == FALSE) %>%
summarize(average.delay = mean(arr_delay)) %>%
left_join(airports, by = c("dest" = "faa" )) %>%
filter(average.delay == max(average.delay)) %>%
select(average.delay)
View (avg.arr)
# Create a dataframe of the average arrival delay for each destination, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average delay?
avg.arr <- group_by(flights, dest) %>%
filter(is.na(arr_delay) == FALSE) %>%
summarize(average.delay = mean(arr_delay)) %>%
left_join(airports, by = c("dest" = "faa" )) %>%
filter(average.delay == max(average.delay)) %>%
select(name)
View (avg.arr)
View (airlines)
data <- read.csv("data/intro-survey.csv", stringsAsFactors = FALSE)
is.data.frame (data)
### FIRST VISUALIZATION (Elisa)
View (data)
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os)
library("knitr")
library("dplyr")
library("ggplot2")
library("httr")
library("jsonlite")
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os)
View (web.data)
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os, cli_exp, web_exp)
View (web.data)
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os, cli_exp, web_exp, info_interest)
View (web.data)
ggplot(data = web.data) +
geom_line (mapping = aes(x = programming_exp, y = os))
ggplot(data = web.data) +
geom_line (mapping = aes(x = programming_exp, y = cli_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, y = cli_exp))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, y = cli_exp))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, y = info_interest))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, y = cli_exp))
ggplot(data = web.data) +
geom_histogram (mapping = aes(x = programming_exp, y = cli_exp))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, y = web_exp))
ggplot(data = web.data) +
geom_smooth (mapping = aes(x = programming_exp, y = web_exp))
ggplot(data = web.data) +
geom_line (mapping = aes(x = programming_exp, y = web_exp))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, y = web_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, color = info_interest))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest))
ggplot(data = web.data) +
geom_point (mapping = aes(x = programming_exp, fill = info_interest))
ggplot(data = web.data) +
geom_line (mapping = aes(x = programming_exp, y = web_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp), stat = web_exp)
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, color = os))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = os))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest))
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os, cli_exp, web_exp, info_interest) %>%
filter (info_interest != "N/A")
### FIRST VISUALIZATION (Elisa)
web.data <- select (data, programming_exp, os, cli_exp, web_exp, info_interest) %>%
filter (info_interest != "N/A")
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest), stat = "web_exp")
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest), stat = web_exp)
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest), stat ="identity")
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, y = web_exp, fill = info_interest), stat ="identity")
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, fill = info_interest))
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, y = os, fill = info_interest), stat = "identity")
ggplot(data = web.data) +
geom_bar (mapping = aes(x = programming_exp, y = cli_exp, fill = info_interest), stat = "identity")
# Install and load the `ggplot2` package
#install.packages('ggplot2')
library('ggplot2')
# For this exercise you will again be working with the `diamonds` data set.
# Use `?diamonds` to review details about this data set
?diamonds
# Draw a bar chart of the diamonds data, organized by cut
# Each bar's height is based on the "count" (number) of diamonds with that cut
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = depth, fill = clarity))
# Draw a bar chart of the diamonds data, organized by cut
# Each bar's height is based on the "count" (number) of diamonds with that cut
diamonds.sample <- sample_n(diamonds)
# Draw a bar chart of the diamonds data, organized by cut
# Each bar's height is based on the "count" (number) of diamonds with that cut
diamonds.sample <- sample_n(diamonds, 1000)
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = depth, fill = clarity))
# Install and load `ggplot2` and `dplyr`
library('ggplot2')
library('dplyr')
# Also install and load the `maps` package, which contains geometry for a number
# of pre-defined maps.
install.packages("maps")
library("maps")
# Use `map_data()` to load the `county` map of the US, storing it in a variable
# `counties.map`
map_data("county")
# Use `map_data()` to load the `county` map of the US, storing it in a variable
# `counties.map`
county <- map_data("county")
# Inspect this data frame to understand what data yu're working with
View (county)
# Use `map_data()` to load the `county` map of the US, storing it in a variable
# `counties.map`
counties.map <- map_data("county")
# Inspect this data frame to understand what data yu're working with
View (counties.map)
shiny::runApp('Documents/OneDrive - UW Office 365/INFO-201/Assignments/a7-data-app-etruong')
shiny::runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
shiny::runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
shiny::runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
shiny::runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
shiny::runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
runApp('Documents/OneDrive - UW Office 365/INFO-201/Project/final-project-info201')
